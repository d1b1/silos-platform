//  BackSession
//  (c) 2012 Stephan Smith (d1b1)
//
//  This is a backbone + twitter boot strap session
//  plugin. It was based on the work Cole Krumbholz. This
//  plugin has been altered to allow the backbone app
//  to have little or no knowledge of the Session State.
//
//  Assumptions:
//    1. BB / Client site apps should not manage app state.
//  
//  This document may be used and distributed in accordance with 
//  the MIT license. You may obtain a copy of the license at 
//    http://www.opensource.org/licenses/mit-license.php

(function(){

  // Define the namespace.
  var BackSession = this.BackSession;
  if (typeof BackSession === 'undefined') {
    BackSession = this.BackSession = {};
  }

  // Define the API endoints. To utilize this
  // module, you need to implement the following 
  // RESTFUL API endpoints. Customize to your 
  // requirements here. 

  // TODO: Move this to a config in the app.js for bb.

  BackSession.endpoints = {
      'login': '/api/session',
      'check': '/api/session',
      'logout': '/api/session',
      'register': '/api/session/register',
      'forgot': '/api/session/forgot'
  };

  BackSession.logout = function (do_function) {

    $.ajax({
      type: 'DELETE',
      url: BackSession.endpoints.logout,
      success: function () {
        // First delete the model for the current user.
        delete BackSession.current_user; 

        // Second call the callback. 
        do_function();   
      }
    });

  }

  // This function is designed to provide a wrapper
  // for the session state check. Even if the app has
  // a valid session, we might need to allow the 
  // the app to check if the session is stale, i.e.
  // make certain the user is still got a session 
  // active on the server.

  BackSession.hasSession = function() {

    // TODO : Add in a local expiration check 
    // for the time to live. Maybe add a TTL 
    // in the larger plugin settings. 

    // TODO: Add in a custom function to 
    // allow a user to write their own 
    // TTL/Session checker function.

    if (BackSession.current_user == undefined) {
      return false;
    } else {
      return BackSession.current_user.get('status');
    }

  }

  // ----------------------------------------------------------
  //
  // DO not change below this point. The following code
  // should be stable on does not need to be altered. Maybe...
  
  // BackSession.processFormErrors:

  // This function provides a binding between session data
  // returned by the server side authentication and the 
  // backbone view.

  BackSession.processFormErrors = function (view, response, prefix) {
    if (typeof prefix === 'string') {
      prefix += "_";
    } else {
      prefix = "";
    }

    var data = jQuery.parseJSON(response.responseText);

    if (data && 'form_errors' in data) {
      for (key in data.form_errors) {
        var tag;
        if (key == '') {
          tag = "#"+prefix+"form_errors";
        } else {
          tag = "#"+prefix+key+" .errors";
          view.$("#"+prefix+key).addClass('error')
        }
        for (error in data.form_errors[key]) {
          view.$(tag).append(data.form_errors[key][error]+" ");
        }
      }
    }   

    $('#login_modal').effect('shake',{ times: 2 }, 100)    
  };

  // Cleans up form errors generated by processFormErrors.

  BackSession.cleanupFormErrors = function (view, prefix) 
  {
    var selector = "*";
    if (typeof prefix === 'string') {
      prefix += "_";      
      selector = '[id^="'+prefix+'"]';
    } else {
      prefix = "";
    }

    view.$(selector).removeClass('error');
    view.$(selector+' .errors').empty();
    view.$('#'+prefix+'form_errors').empty();    
  };

  // Defines the base login form view.
  // TODO: Move the Login Code Out of a String and into a template file.

  BackSession.LoginView = Backbone.View.extend({

    login_form: ""
    + "<div class='modal hide fade' id='login_modal'>"
    + "  <div class='modal-header'>"
    + "    <h3 style='margin-left: 10px'>Please Sign-in</h3>"
    + "  </div>"
    + "  <div class='modal-body'>"
    + "    <div class='row'><div class='span3' style='margin-left: 30px'>"
    + "      <form class='form' style='margin:0' id='login_form' action='' method='POST'>"
    + "      <div id='login_form_errors' style='color:red'></div>"

    + "      <div class='control-group' id='login_username'>"
    + "        <label class='control-label'>Username  <span class='errors'></span>"
    + "        <input type='text' name='username'/></label>"
    + "      </div>"

    + "      <div class='control-group' id='login_password'>"
    + "        <label class='control-label'>Password <span class='errors'></span>"
    + "        <input type='password' name='password'/></label>"
    + "      </div>"

    + "      <input type='submit' value='Continue' style='margin-top:18px' id='login-submit' class='btn btn-primary'>"

    + "      </form>"
    + "    </div></div>"
    + "  </div>"
    + "</div>",

    // If the bb app is using Layout Manager this flag ensures that global
    // settings does not allow the layout to attempt to manage this view.

    manage: false,

    initialize: function(create_user) {
      this.create_user = create_user;

      // Attach the view to a #system div within the body.
      $('#system').append(this.render().el);
    },

    render: function() {
      $(this.el).html(this.login_form);
      return this;
    },

    _make_success_fn: function () {
      var that=this;
      return function (data, textStatus, jqXHR) {
        if (data.status) {
          that._hide();
          that.create_user.call(undefined, data, jqXHR);
        } else {
          that._show();
        }
      }
    },

    // This is a hack to allow the same code
    // to call the session builders, but with
    // a passthru for pages that do not require
    // session.

    _make_success_pass_fn: function () {
      var that=this;
      return function (data, textStatus, jqXHR) {
        var data = { status: false };

        that.create_user.call(undefined, data, jqXHR);
      }
    },

    _make_error_fn: function (prefix) {
      var that=this;
      return function(jqXHR, textStatus, errorThrown) {
        BackSession.processFormErrors(that, jqXHR, prefix);
      }
    },

    events: {
      "click #forgot-link" : "_forgot_clicked",
      "click #forgot-submit" : "_forgot_submitted",
      "click #login-submit" : "_login_submitted",
    },

    _forgot_submitted: function () {
      var that = this;
      BackSession.cleanupFormErrors(this, "forgot");
      BackSession.cleanupFormErrors(this, "login");
      var that = this;
      $.ajax({
        type: 'POST',
        url: BackSession.endpoints.forgot, // '/api/session/forgot',
        data: $('#forgot_form').serialize(),
        error: this._make_error_fn("forgot"),
        success: function () {
          that.$('#forgot-submit').addClass('disabled');
          that.$el.undelegate('#forgot-submit', 'click');
          that.$('#recover-ok').fadeIn();          
        }
      });
      return false;
    },

    _login_submitted: function () {
      var that = this;
      BackSession.cleanupFormErrors(this, "forgot");
      BackSession.cleanupFormErrors(this, "login");
      $.ajax({
        type: 'POST',
        url: BackSession.endpoints.login,
        data: $('#login_form').serialize(),
        success: this._make_success_fn(),
        error: this._make_error_fn("login"),
      });
      return false;
    },

    _forgot_clicked: function () {
      this.$("#forgotten-password").show();
    },

    _show: function() {
      $('#login_modal').modal({
        keyboard: false,
        backdrop: 'static',
        show: true
      });
    },

    _hide: function() {
      $('#login_modal').modal('hide');
    },

    fetchUser: function(passthru) {

      if (passthru === 'passthru') {

        $.ajax({
          type: 'GET',
          url: BackSession.endpoints.check,
          success: this._make_success_pass_fn(),
          error: this._make_success_pass_fn()
        });

      } else {

        $.ajax({
          type: 'GET',
          url: BackSession.endpoints.check,
          success: this._make_success_fn(),
          error: this._show
        });
      }

    },

  });

  BackSession.LoginRegisterView = BackSession.LoginView.extend({

    login_form: ""
    + "<div class='modal hide fade' id='login_modal'>"
    + "  <div class='modal-header'>"
    + "    <h3 style='margin-left: 10px'>Please Sign-in</h3>"
    + "  </div>"
    + "  <div class='modal-body'><div class='row'>"
    + "    <div class='span3' style='margin-left: 30px'>"
    + "      <h4 style='margin-bottom: 10px'>Use existing account</h4>"
    + "      <form class='form' style='margin:0' id='login_form' action='' method='POST'>"
    + "        <div id='login_form_errors' style='color:red'></div>"

    + "        <div class='control-group' id='login_username'>"
    + "          <label class='control-label'>username  <span class='errors'></span>"
    + "          <input type='text' name='username'/></label>"
    + "        </div>"

    + "        <div class='control-group' id='login_password'>"
    + "          <label class='control-label'>password  <span class='errors'></span>"
    + "          <input type='password' name='password'/></label>"
    + "        </div>"

    + "        <input type='submit' style='margin-top:18px' id='login-submit' class='btn btn-primary'>"
    // + "        <input type='button' value='forgot password?' style='margin-top:18px' id='forgot-link' class='btn btn-primary'>"

    + "      </form>"

    + "    </div><div class='span3' style='margin-left: 70px'>"
    + "      <h4 style='margin-bottom: 10px'>Create new account</h4>"
    + "      <form class='form' style='margin:0' id='register_form' action='' method='POST'>"
    + "        <div id='register_form_errors' style='color:red'></div>"

    + "        <div class='control-group' id='register_username'>"
    + "          <label class='control-label'>username  <span class='errors'></span>"
    + "          <input type='text' name='username'/></label>"
    + "        </div>"

    + "        <div class='control-group' id='register_password1'>"
    + "          <label class='control-label'>password  <span class='errors'></span>"
    + "          <input type='password' name='password1'/></label>"
    + "        </div>"

    + "        <div class='control-group' id='register_password2'>"
    + "          <label class='control-label'>password (again) <span class='errors'></span>"
    + "          <input type='password' name='password2'/></label>"
    + "        </div>"

    + "        <div class='control-group' id='register_email'>"
    + "          <label class='control-label'>email <span class='errors'></span><br>"
    + "          <input type='text' name='email'/></label>"
    + "        </div>"

    + "        <input type='submit' style='margin-top:18px' id='register-submit' class='btn btn-primary'>"
    + "      </form>"
    + "    </div>"
    + "  </div></div>"
    + "</div>",

    events: {
      "click #forgot-link" : "_forgot_clicked",
      "click #forgot-submit" : "_forgot_submitted",
      "click #login-submit" : "_login_submitted",
      "click #register-submit" : "_register_submitted",
    },

    _register_submitted: function () {
      var that = this;

      BackSession.cleanupFormErrors(this, "forgot");
      BackSession.cleanupFormErrors(this, "login");
      BackSession.cleanupFormErrors(this, "register");

      $.ajax({
        type: 'POST',
        url: BackSession.endpoints.register,
        data: $('#register_form').serialize(),
        success: this._make_success_fn(),
        error: this._make_error_fn("register"),
      });
      return false;
    },

    _forgot_submitted: function() {
      BackSession.cleanupFormErrors(this, "register");
      return BackSession.LoginView.prototype._login_submitted.call(this);
    },

    _login_submitted: function() {
      BackSession.cleanupFormErrors(this, "register");
      return BackSession.LoginView.prototype._login_submitted.call(this);
    },

  });


  // TODO: Add in a config option to allow the user
  // to mix in their own session TTL function and not use
  // the default. Need to add the mixin option.

  // With_user is a function that allows the external code (route)
  // to address authentication requirements. This code will check to
  // see the app already has some idea of what is happening. If not
  // then it will do a 'fetch' to the API to check for session. This
  // approach assumes that the browser and API will handle all session
  // cookie requirements.

  // TODO: Might need to review and add back in the create_user argument
  //       and code in the following. Not sure if it is really needed.

  BackSession.with_user = function (do_function, passthru ) {

    if (!BackSession.current_user || (BackSession.current_user && BackSession.current_user.get('status') === false)) {

      var _finished_fn = function(user) {
        BackSession.current_user = user;
        do_function(user);
      }

      var _create_user_fn = function(data) {
        new_user = new Backbone.Model(data);
        new_user.url = BackSession.endpoints.check;
        _finished_fn(new_user);
      }

      // var loginView = new BackSession.LoginView(_create_user_fn);
      var loginView = new BackSession.LoginView(_create_user_fn);

      // Ok tell the view to do its initial check. If we have
      // session then the fetch will process the do_function.

      loginView.fetchUser( passthru );
    } else {
      do_function(BackSession.current_user);
    }
  };
  
}).call(this);